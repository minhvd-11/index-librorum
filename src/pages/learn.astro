---
import Layout from "../layouts/Layout.astro";
import Flashcard from "../components/Flashcard";
import Quiz from "../components/Quiz";
import { supabase } from "~/lib/supabase";
import type { Progress, Word } from "~/types";

interface ApiWord {
  id: string;
  word: string;
  translation: string;
  example_sentence: string;
  audio_url?: string;
  difficulty: "easy" | "medium" | "hard";
  category: string | null;
}

// Map API data to Word interface
const mapApiWordToWord = (apiWord: ApiWord): Word => ({
  id: apiWord.id,
  word: apiWord.word,
  translation: apiWord.translation,
  exampleSentence: apiWord.example_sentence,
  difficulty: apiWord.difficulty,
  audioUrl: apiWord.audio_url,
});

// Fetch words
const { data: apiWords, error: wordsError } = await supabase
  .from("words")
  .select("*");
if (wordsError) {
  console.error("Supabase words error:", wordsError);
  throw new Error(`Failed to fetch words: ${wordsError.message}`);
}

const words: Word[] = apiWords?.map(mapApiWordToWord) || [];

// Skip user-specific data during build
let wordsDue: Word[] = words;
if (import.meta.env.SSR || import.meta.env.PROD) {
  // In build mode, use all words (no user filtering)
  wordsDue = words || [];
} else {
  // In dev mode with client-side, fetch user and progress
  const {
    data: { user },
    error: userError,
  } = await supabase.auth.getUser();
  if (userError) {
    console.warn("Supabase user error:", userError);
  }

  const { data: progress, error: progressError } = user
    ? await supabase.from("progress").select("*").eq("userId", user.id)
    : { data: [], error: null };
  if (progressError) {
    console.error("Supabase progress error:", progressError);
  }

  const now = new Date();
  wordsDue =
    words?.filter((word: Word) => {
      const wordProgress: Progress = progress?.find(
        (p) => p.wordId === word.id
      );
      return !wordProgress || new Date(wordProgress.nextReview) <= now;
    }) || [];
}
---

<Layout title="Learn Vocabulary">
  <div class="container mx-auto p-4 grid gap-4">
    <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Flashcards</h1>
    {
      wordsDue.length === 0 ? (
        <p class="text-gray-600 dark:text-gray-300">No words due for review.</p>
      ) : (
        <div class="grid gap-4 md:grid-cols-2">
          {wordsDue.map((word: Word) => (
            <Flashcard client:load word={word} />
          ))}
        </div>
      )
    }
    <h1 class="text-2xl font-bold text-gray-900 dark:text-white mt-8">Quiz</h1>
    <Quiz client:load words={wordsDue.length >= 2 ? wordsDue : words || []} />
  </div>
</Layout>
